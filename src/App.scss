@import url("https://fonts.googleapis.com/css2?family=VT323&display=swap");
// Love dynamically typed text? You're gonna love this
// Edit these strings to see them typed on the screen:
$strings: ("WELCOME TO TALENTS HUNT STUDIO" "LET'S HUNT 🏹");

// now for some timing (in seconds)
$durCharFwd: 0.1; // character typed
$durFullGap: 2; // time between typed/delete
$durCharBwd: 0.08; // character deleted
$durDoneGap: 1; // time between strings

// initializing some variables and functions ✊🏼
$charCount: 0;
$durTotal: 0;
@each $string in $strings {
  $charCount: $charCount + str-length($string);
  $durTotal: $durTotal +
    (str-length($string) * ($durCharFwd + $durCharBwd)) +
    $durFullGap +
    $durDoneGap;
}
@function percent($string, $letter, $modifier) {
  $stringsPast: $string - 1;
  $time: 0;
  @while $stringsPast > 0 {
    $time: $time +
      (
        ($durCharFwd + $durCharBwd) * (str-length(nth($strings, $stringsPast)))
      ) +
      $durFullGap +
      $durDoneGap;
    $stringsPast: $stringsPast - 1;
  }
  @if $letter <= str-length(nth($strings, $string)) {
    $time: $time + ($durCharFwd * ($letter - 1));
  } @else {
    $time: $time +
      ($durCharFwd * str-length(nth($strings, $string))) +
      $durFullGap +
      ($durCharBwd * ($letter - str-length(nth($strings, $string))));
  }
  @return ($time / $durTotal * 100 + $modifier) + "%";
}
$currentPercentage: 0;
// now THIS is where the magic happens... ✨
@keyframes typed {
  @for $i from 1 through length($strings) {
    // @for $j from 1 through (str-length(nth($strings, $i)) * 2 - 1) {
    @for $j from 1 through (str-length(nth($strings, $i)) * 2) {
      /* string #{$i}, char #{$j} */
      @if $j < str-length(nth($strings, $i)) * 2 {
        // not last character deleted
        #{percent($i, $j, 0)},
        #{percent($i, $j+1, -0.001)} {
          @if $j <= str-length(nth($strings, $i)) {
            content: quote(#{str_slice(nth($strings, $i), 1, $j)});
          } @else {
            content: quote(
              #{str_slice(
                  nth($strings, $i),
                  1,
                  str-length(nth($strings, $i)) -
                    ($j - str-length(nth($strings, $i)))
                )}
            );
          }
        }
      } @else {
        @if $i < length($strings) {
          // not last string
          #{percent($i, $j, 0)},
          #{percent($i+1, 1, -0.001)} {
            content: "​"; // zero-width space to retain element height
          }
        } @else {
          // last string
          #{percent($i, $j, 0)},
          100% {
            content: "​"; // zero-width space to retain element height
          }
        }
      }
    }
  }
}
@keyframes beam-blink {
  75% {
    border-color: transparent;
  }
}
* {
  backface-visibility: hidden;
}

.introID {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #000;
  background-image: // skeuomorphism anyone?
    // radial-gradient(rgba(#fff, 0.125), rgba(#fff, 0)),
    // linear-gradient(to bottom, #000, #000 2px, #111 3px);
    radial-gradient(at 1% 60%, #4847db 0px, transparent 50%),
    radial-gradient(at 87% 48%, #4f48db 0px, transparent 50%),
    radial-gradient(at 77% 66%, #5148db 0px, transparent 50%),
    radial-gradient(at 66% 61%, #db48e1 0px, transparent 50%),
    radial-gradient(at 85% 9%, #db48d1 0px, transparent 50%);
  background-repeat: repeat-y;
  background-position: center center;
  background-size: cover, 100% 3px;
  font-size: calc(40px + 2vw);
  font-family: "VT323", monospace, sans-serif !important;
  color: #ffffff; // hacker green
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  &::after {
    content: "​"; // zero-width space to retain element height
    position: relative;
    top: -13px;
    @media (max-width: 575px) {
      top: -33px;
    }
    display: inline-block;
    padding-right: 3px;
    padding-right: calc(3px + 0.1vw);
    border-right: 10px solid rgba(#ffffff, 0.75);
    border-right: calc(1.1vw + 4px) solid rgba(#ffffff, 0.75);
    text-shadow: 0 0 5px rgba(51, 255, 51, 0.75);
    white-space: nowrap;
    animation: typed #{$durTotal + "s"} linear 0s 1, beam-blink 1s infinite;
  }
}

.anime2 {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  opacity: 0;
  z-index: 1;
  animation: animate2 10.5s 1 linear;
  transform-origin: center;
  transition: all cubic-bezier(0.25, 0.1, 0.25, 1);
  animation-delay: 0s;
}

@keyframes animate2 {
  0% {
    // transform: scale(0.7);
    opacity: 1;
  }
  50% {
    // transform: scale(1.05); /* Zoom-in to scale 1.05 for anime2 */
    opacity: 1;
  }
  100% {
    // transform: scale(1); /* Ensure anime2 ends at scale 1 */
    opacity: 1;
  }
}

.hero {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;

  animation: animate3 12s 1 linear;
  transform-origin: center;
  transition: all cubic-bezier(0.25, 0.1, 0.25, 1);
  animation-delay: 13s;
}

@keyframes animate3 {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 1;
  }
}

.bgGradient {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  background-size: 250%;

  background-image: radial-gradient(at 1% 60%, #4847db 0px, transparent 50%),
    radial-gradient(at 87% 48%, #4f48db 0px, transparent 50%),
    radial-gradient(at 77% 66%, #5148db 0px, transparent 50%),
    radial-gradient(at 66% 61%, #db48e1 0px, transparent 50%),
    radial-gradient(at 85% 9%, #db48d1 0px, transparent 50%);
  animation: meshGradientAnimation 5s infinite linear;
}

@keyframes meshGradientAnimation {
  0% {
    background-position: 0% 0%, 0% 0%, 0% 0%, 0% 0%, 0% 0%;
  }

  50% {
    background-position: 100% 100%, 100% 100%, 100% 100%, 100% 100%, 100% 100%;
  }
  100% {
    background-position: 0% 0%, 0% 0%, 0% 0%, 0% 0%, 0% 0%;
  }
}
